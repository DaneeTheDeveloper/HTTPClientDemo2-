@page "/dictionary"

@using HTTPClientDemo2.Data

@inject DictionaryService DictionaryPage

<div class="header">
    <img src="images/STOCK-PexelsLibraryJoshSorenson990432.jpg" />
    <h1>Dictionary</h1>
    <style>
        .header img {
            width: 500px;
            height: 150px;
            background: #555;
        }

        .header h1, .input-group, .btn-primary, .table {
            position: relative;
            top: 18px;
            left: 10px;
        }

        h1 {
            font-family: "Courier New", monospace;
        }

        h3 {
            font-weight: bolder;
            font-size: larger;
        }
    </style>
</div>

<div class="input-group mb-3">
    <input @bind="wordToDefine" placeholder="Expand your vocabulary!" type="text" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default">
    @if (hasError)
    {
        <div class="invalid-feedback" style="display: block">
            Please try another word.
        </div>
    }
</div>

<button class="btn btn-primary" @onclick="WordLookUp">Search Word</button>
<br/>
<br/>
@if (isLoading)
{
   
    <p><em>Loading...</em></p>
}
else if (definitions != null)
{
    <br/>
    <h2>@definitions.word</h2>
    <h3>[@definitions.pronunciation.all]</h3>

    <table class="table">
        <thead>
            <tr>
                <th>Definition</th>
                <th>Part of Speech</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var word in definitions.results)
            {
                <tr>
                    <td>@word.definition</td>
                    <td>@word.partOfSpeech</td>
                </tr>
            }
        </tbody>
    </table>

    <br/>

    <p><b>Synonyms:</b></p>
    <p>
        <ul>
         @foreach (var word in definitions.results)
          {

              @if (word.synonyms != null && word.synonyms.Count > 0)
               {
                    <li>@String.Join(", ", word.synonyms)</li>
               }

          }

        </ul>
    
    </p>

}




@code {
    bool hasError = false;
    bool isLoading = false;
    string wordToDefine;
    private DefinitionResult definitions;

    protected async Task WordLookUp()
    {
        try
        {
            hasError = false;
            isLoading = true;
            definitions = await DictionaryPage.GetDefinitionAsync(wordToDefine);
        }
        catch (Exception e)
        {
            hasError = true;
        }
        finally
        {
            isLoading = false;
        }
        
    }

}
